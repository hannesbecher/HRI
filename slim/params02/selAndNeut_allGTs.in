
initialize() {
	//defineConstant("REPID", "000"); // must be set for interactive run
	defineConstant("NN", 1000);
	defineConstant("ss", -(1e-3));
	defineConstant("kk", 1);
	defineConstant("L", 2500);
	defineConstant("u", 2*1e-5);
	
	// m2 models a biallelic locus; an m2 mutation is "A",
	// absence of an m2 mutation is "a"; "aa" is neutral
	initializeMutationType("m2", 1.0, "f", ss);
	m2.convertToSubstitution = F;
	m2.color = "red";
	// m3 is used for new mutations; new m3 mutations get
	// uniqued down to the correct biallelic m2 state
	initializeMutationType("m3", 0.5, "f", 0.0);
	m3.convertToSubstitution = F;
	
	initializeMutationType("m4", 0.0, "f", 0.0);
	m4.convertToSubstitution = T;
	m4.color = "cornflowerblue";
	initializeGenomicElementType("g1", c(m3,m4), c(1.0,1.0));
	initializeGenomicElement(g1, 0, (L-1));
	initializeMutationRate(u);
	//	initializeRecombinationRate(1e-8);
	initializeRecombinationRate(0.0);
	
}

1 early() {
	sim.addSubpop("p1", NN);
	p1.setCloningRate(1.0);
	// create the permanent m2 mutation objects we will use
	target = p1.genomes[0];
	target.addNewDrawnMutation(m2, 0:(L-1));
	defineConstant("MUT", target.mutations);
	// then remove them; start with "aa" for all individuals
	target.removeMutations();
	
	// log results
	log = community.createLogFile(paste0("sim", REPID, ".log"), logInterval=1000); // set REPID on command line
	//log = community.createLogFile(paste0("freq", "001"), logInterval=1000);
	log.addTick();
	log.addMeanSDColumns("freq", "sim.mutationFrequencies(NULL, MUT);");
}
mutation(m3) {
	// if we already have an m2 mutation at the site, allow
	// the new m3 mutation; we will remove the stack below
	if (genome.containsMarkerMutation(m2, mut.position) & runif(1) < kk)
		return T;
	// no m2 mutation is present, so unique down
	return MUT[mut.position];
}


late() {
	// implement back-mutations from A to a
	sim.subpopulations.individuals.genome2.removeMutations();
	m3muts = sim.mutationsOfType(m3);
	
	// do we have any m3 mutations segregating?
	// if so, we have m2/m3 stacked mutations to remove
	if (m3muts.length() > 0)
	{
		genomes = sim.subpopulations.genomes;
		counts = genomes.countOfMutationsOfType(m3);
		hasStacked = genomes[counts > 0];
		for (genome in hasStacked)
		{
			stacked_m3 = genome.mutationsOfType(m3);
			stackPositions = stacked_m3.position;
			all_m2 = genome.mutationsOfType(m2);
			s = (match(all_m2.position, stackPositions) >= 0);
			stacked_m2 = all_m2[s];
			genome.removeMutations(c(stacked_m3, stacked_m2));
		}
	}
	// remove mutations in the haploid genomes that have fixed
	muts = sim.mutationsOfType(m4);
	freqs = sim.mutationFrequencies(NULL, muts);
	if (any(freqs == 0.5))
		sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}
2000 late() {
	// get unique mutation of each type
	ms2=unique(p1.genomes.mutationsOfType(m2));
	ms4=unique(p1.genomes.mutationsOfType(m4));
	
	// generate samples of haplid genomes
	genomes1form2=p1.individuals.genome1;
	genomes1form4=p1.individuals.genome1;
	
	// get mutation counts to make SFSs
	//cts2=genomes1form2.mutationCountsInGenomes(ms2);
	//cts4=genomes1form2.mutationCountsInGenomes(ms4);
	
// get mutation counts to make SFSs
	//sfs2= sapply(c(0,1,2,3,4,5,6,7,8,9,10,11,12), "sum(cts2==applyValue);");
	//sfs4= sapply(c(0,1,2,3,4,5,6,7,8,9,10,11,12), "sum(cts4==applyValue);");
	
	// print SFSs and avge allele freq.
	//print(paste("SFSsel:",sfs2));
	//print(paste("SFSneu:",sfs4));
	//print(paste("FreqSel:", sum(sfs2)/L));
	//print(paste("FreqNeu:", sum(sfs4)/L));
	
	/// print SFSs and avge allele freq.
	//nn= length(sfs2)-1;
	//print(paste("PiSel:", sum(sfs2*(0:nn)*(nn:0))*2/(nn-1)/nn/L));
	//print(paste("PiNeu:", sum(sfs4*(0:nn)*(nn:0))*2/(nn-1)/nn/L));

   //extract all mutations and gt their positions	
	m2_12=unique(genomes1form2.mutationsOfType(m2));
	m4_12=unique(genomes1form2.mutationsOfType(m4));
	posm2=m2_12.position;
	posm4=m4_12.position;

	// make a gt array
	gt2=(t(asInteger(sapply(posm2, "genomes1form2.containsMarkerMutation(m2, applyValue);", simplify="matrix"))));
	gt2 = cbind(posm2, gt2);
	
	// same thing for neutral mutations
	gt4=(t(asInteger(sapply(posm4, "genomes1form2.containsMarkerMutation(m4, applyValue);", simplify="matrix"))));
	// turn into text lines
	gt4 = cbind(posm4, gt4);
	gt2l=apply(gt2, 0, "paste(applyValue,sep=\",\");");
	gt4l=apply(gt4, 0, "paste(applyValue,sep=\",\");");

	//print(gt2l); // for debug only
	writeFile(paste0("sim", REPID, ".gt2"), gt2l);
	writeFile(paste0("sim", REPID, ".gt4"), gt4l);
	//p1.sampleIndividuals(12).genome1.output(); // debug
	
}

